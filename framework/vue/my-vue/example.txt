1. Value binding
<template>
  <div id="app">
    {{name}}
  </div>
</template>
<script>
export default {
    data() {
      return {
        name: 'dang van nhang'
      }
    }
}
</script>
2. Property binding
<template>
  <div id="app">
    <h1 v-bind:id="id">Welcome back Naha</h1>
    // chung ta se gan cai id cho cai bien id
  </div>
</template>


<script>

export default {

  data() {
    return {
      id: "header_title"
    }
  },
}
</script>


2.1 binding value disabled
<template>
  <div id="app">
    <h1 v-bind:id="id">Welcome back Naha</h1>
    <input type="text" :disabled="inputDisable">
   
  </div>
</template>


<script>

export default {

  data() {
    return {
      id: "header_title",
      inputDisable: false
    }
  },
}
</script>

// chỗ trên có nghĩa là nếu cái in inputDisable mà false thì nó sẽ không disabled, 
// mà nếu nó true thì nó sẽ disabled

2.2 bind event
<template>
  <div id="app">
    <h1 v-bind:id="id">Welcome back Naha</h1>
    <input type="text" :disabled="inputDisable">
    <button @click="inputDisable = ! inputDisable">Mo/Khoa</button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      id: "header_title",
      inputDisable: false
    }
  },
}
</script>

// chỗ trên chúng ta có một button và có @click, đây chính là bắt sự kiện click
// nếu chúng ta click vào thì nó sẽ thay đổi giá trị của inputDisable.
 
2.3  binding class

<template>
  <div id="app">
    <h1 :class="{daChon: selected}">Welcome back Naha</h1>

  </div>
</template>


<script>

export default {

  data() {
    return {
      selected: true
    }
  },
}
</script>

<style>
.daChon{
  color: red;
}
</style>

// ở đây giá trị của class daChon sẽ phụ thuộc vào giá trị của selected, 
// nếu selected là true thì element sẽ có class là daChon
// selected: true thì sẽ có màu đỏ, nếu ngược lại thì sẽ có màu đen



2.4
<template>
  <div id="app">
    <h1 :class="{daChon: selected}">Welcome back Naha</h1>
    <button @click="selected = ! selected">Doi mau</button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      selected: true
    }
  },
}
</script>

<style>
.daChon{
  color: red;
}
</style>
// có nghĩa là class daChon sẽ phụ thuộc vào biến selected
// chỗ trên chúng ta có một button, nó giúp chúng ta bắt sự kiện và sẽ đổi giá trị của selected

3. Model binding

<template>
  <div id="app">
    <input type="text" v-model="name">
    <h1>{{name}}</h1>
  </div>
</template>


<script>

export default {

  data() {
    return {
      name: "dang van Nhagn"
    }
  },
}
</script>

// day la vi du thich hop nhat cho model
// dau tien cai o input no se co value mac dinh la gia tri cua bien name va cai h1 cung hien thi ra gia tri cua bien name
// nhung khi ta thay doi gia tri cua input thi gia tri cua bien name cung thay doi theo 


3.1 model binding and array

<template>
  <div id="app">
    <input type="text" v-model="names[1]">
    <h1>{{names}}</h1>
  </div>
</template>


<script>

export default {

  data() {
    return {
      names: [
        'dang van nhang',
        'huynh huu duc'
      ]
    }
  },
}
</script>

3.2

<template>
  <div id="app">
    <input type="text" v-model="channel.name">
    <h1>{{channel.name}}</h1>
  </div>
</template>


<script>

export default {

  data() {
    return {
      channel: {
        name: 'duc',
      }
    }
  },
}
</script>

// cho cai bien thi chung ta cung co the cho no la mot cai object hay la mang gi cung duoc


4. event handling

<template>
  <div id="app">
   <button v-on:click=" color='black' ">click</button>
    <h2>{{color}}</h2>
  </div>
</template>


<script>

export default {

  data() {
    return {
      color:"red"
    }
  },
}
</script>

// nghia la khi chung ta click vao cai btn thi no se doi gia tri cua bien


4.1 
<template>
  <div id="app">
    <input type="text" v-model="color">
   <button @click=" color='yellow' ">click</button>
 
  </div>
</template>


<script>

export default {

  data() {
    return {
      color:"red"
    }
  },
}
</script>

// chung ta co the viet tat su kien thanh @action= "";
// @click="";

4.2 prevent default event

<template>
  <div id="app">
    <form action="/ab" v-on:submit.prevent="doSomething()">
      <input type="text" v-model="color">
      <button type="submit" @click.prevent=" color='yellow' ">click</button>
    </form>
 
  </div>
</template>


<script>

export default {

  data() {
    return {
      color:"red"
    }
  },
}
</script>

// neu ma co prevent thi form se khong submit duoc luon

9. ref:

<template>
  <div id="app">
    <form action="/ab" >
      <input type="text" v-model="color" ref="channelName">
      <button type="submit" @click.prevent=" color='yellow' ">click</button>
    </form>
 
  </div>
</template>


<script>

export default {

  data() {
    return {
      color:"red"
    }
  },

  // this.$refs.channelName => tra ve chinh element co ref="channelName" // no giong nhu id vay do
}
</script>

// muc dich chinh cua ref la giup chung ta co the lua chon phan tu DOM bang gia tri ben trong refs
// this.$refs.input


10. conditional rendering (v-show)

<template>
  <div id="app">
    <h1 v-show="isShow">Welcome back Naha</h1>
    <button v-on:click="isShow=!isShow"></button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      isShow: true
    }
  },

}
</script>

// o day v-show giup chung ta xac dinh thanh phan do co duoc hien thi len man hinh hay khong
// button la giup chung ta thay doi gia tri cua bien isShow de cho v-show biet co hien thi hay khong
// v-show la se cho cai element do display:none


10.1 v-if

<template>
  <div id="app">
    <h1 v-show="isShow">Welcome back Naha</h1>
    <button v-on:click="isShow=!isShow">An/Hien</button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      isShow: true
    }
  },

}
</script>

// v-if: la se cho cai element do bien mat luon

10.2 // v-show cho an/hien button theo yeu cau

<template>
  <div id="app">
    <h1 v-if="isShow">Welcome back Naha</h1>
    <button v-on:click="isShow=!isShow">
      <span v-show="isShow">An</span>
      <span v-show="!isShow">Hien</span> 
    </button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      isShow: true
    }
  },

}
</script>


// chỗ cái btn thì sẽ bắt cái event là click và nó sẽ thay đổi cái giá trị của biến isShow
// bên trong nó có hai cái span và nó sẽ hiện/ẩn theo giá trị của biến isShow
// tại sao cả hai cái lại có v-show. chúng ta muốn khi mà click vào một cái thì cái giá trị hiển thị của nó cũng thay đổi
// hai cái sẽ có giá trị ngược nhau, khi mà click button thì nó sẽ thay đổi giá trị của biến từ true/false thì sẽ có một cái hiện/ẩn

10.3 v-if, v-else de an/hien btn

<template>
  <div id="app">
    <h1 v-if="isShow">Welcome back Naha</h1>
    <button v-on:click="isShow=!isShow">
      <span v-if="isShow">An</span>
      <span v-else>Hien</span> 
    </button>
  </div>
</template>


<script>

export default {

  data() {
    return {
      isShow: true
    }
  },

}
</script>

// thay vi cai cu chuoi o tren thi chung ta co the dung if/else de no hien thi
// doi khi chung ta dung v-if thi se khong bat duoc su kien cua no


11. list rendering (v-for)

<template>
  <div id="app">
    <h2 v-for="(task,index) in tasks" :key="index">
      {{task}}
    </h2>
  </div>
</template>


<script>

export default {

  data() {
    return {
      tasks:[
        'watching films',
        'Reading books',
        'Playing game'
      ]
    }
  },

}
</script>

// phần này có nghĩa là nó sẽ lặp qua từng cái task trong cái task và có một cái index cua cac phan tu trong mảng tasks

11.1 todo list don gian voi v-for

<template>
  <div id="app">
    <h2 v-for="(task,index) in tasks" :key="index">
      <input type="checkbox" v-model="task.done" >
      <span :class="{isFinished: task.done} ">
        {{task.content}}
      </span>
    </h2>
  </div>
</template>
<script>

export default {
  data() {
    return {
      tasks:[
        {
          content:'watching films',
          done:false
          },
        {
          content:'Reading books',
          done:false
          },
        {
          content:'Playing game',
          done:false
          },
      ]
    }
  },

}
</script>
<style>
.isFinished{
  text-decoration-line: line-through;
}
</style>


// Tới phần này là bắt đầu hơi choáng rồi đấy,
// Ta thấy rằng ở trên có một cái thẻ div chứa v-for: nó sẽ giúp chúng ta lặp từng task trong tasks và sẽ có index cho mỗi cái phần tử task trong mảng tasks
// Chỗ vòng lặp thì sẽ có lặp cái checkbox(để check dữ liệu) và thẻ span(để in ra nội dung và sẽ css cho nó)
// khi mà chúng ta click và cái checkbox thì nó sẽ thay đổi giá trị bởi v-model và giá trị của nó sẽ thành true/false



######################## ###########################
<template>
  <div id="app">


    <input type="text" v-model="newTask">

    <button @click="addTask()">Them</button>

    <div v-for="(task,index) in tasks" :key="index">
      
      <input type="checkbox" v-model="task.done" >
      <span :class="{isFinished: task.done} ">
        {{task.content}}
      </span>
    </div>


  </div>
</template>
<script>

export default {
  data() {
    return {

      newTask:'',
      tasks:[
        
      ]
    }
  },
  mounted() {
    // goi API
  },
  methods: {
    addTask: function() {
      this.tasks.push({
        content:this.newTask,
        done:false
      });
    }
  }, 
  // cu khi nao cai newtask(26) thay doi thi cai ham duoi day se duoc thuc hien
  watch: {
    newTask: function(newValue,oldValue) {
      console.log(oldValue);
      console.log(newValue);
    }
  }

}
</script>
<style>
.isFinished{
  text-decoration-line: line-through;
}
</style>

// Day la toan bo code cho todo list


15. components

16. props

<template>
  <div id="app">

<Task v-for="(task, index) in tasks" :key="index" :taskData="task"/>

  </div>
</template>
<script>
import Task from './components/TaskComponent.vue';
export default {
  data() {
    return {
      tasks: [
        {
          content: 'di cho', done: false
        },
        {
          content: 'hoc bai', done: false
        },
        {
          content: 'nau an', done: false
        },
        {
          content: 'viet code', done: false
        },
        {
          content: 'run code', done: false
        },
        {
          content: 'test code', done: false
        },

      ]
    }
  },
  components: {
    Task,

  }

}
</script>

<template>
  <div class="task">
    <span>{{taskData.content}}</span>
  </div>
</template>
<script>
export default {  
  props: [
    'taskData',
  ],
  data() {
    return {
      content:'test',
    }
  } 
}
</script>

// day la cach truyen props tu cha san con

16.1 multiple select button


<template>
  <div >

    <tag> </tag>

  </div>
</template>

<script>

import Tag from './components/TagSelectorComponent';

export default {

  components: {
    
    Tag,

  }

}
</script>

<template>
  <div>
    <!-- Moi cai vong lap se render ra mot cai  div.lists -->
    <div class="lists" 
      v-for="(language, index) in languages" 
      :key="index"
      @click="language.selected = !language.selected"
      :class="{selected:language.selected}"
    >
       
      <span>{{language.name}}</span>

     </div>
   </div>
</template>

<script>
  export default {
    data() {
      return {
        languages:[
          {name:'php', selected: false},
          {name:'html,css', selected: false},
          {name:"java", selected: false},
          {name:'javascript', selected: false},
          {name:'C', selected: false},
          {name:'C#', selected: false},
        ]
      }
    }
  }
</script>

<style lang="scss">
    div .lists {
      display: inline;
      border: 1px solid burlywood;
      margin: 20px;
      border-radius: 4px;
      padding: 5px;
    
      span {
        color: red;
        text-align: center;
      }
    }
    .selected {
      background-color:#66ffff; 
      span {
        color: black;
      }
    }
</style>

// you can select multiple button very easy

17. filter bo loc 


<template>
  <div >
    {{ tongTien | dauCham}}
  </div>
</template>

<script>

export default {
  data() {
    return {
      tongTien: 1000000,
    }
  },
  filters: {
    dauCham: function (soTien) {
      return soTien.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
     
    }
  }

}
</script>

// cai bien tong tien thi se di qua cai ham dauCham nhung gia tri van giu nguyen



